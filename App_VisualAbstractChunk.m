% In the following GUI there are 36 panels which shows images across the trials.
% There are three parts of the experiment i.e. Block1, Block2, Block3 
% Inventory    = 2 Classes, 5 same chunks for both the classes with different
%                probabilities which are mentioned in opening function 
% Classes      = Class1, Class2
% No of chunks = 5 ; every chunk has 4 images in it with different
%                    position configuration 
% No of images = 12 total which are randomly chosen to make 5 chunks out of
% No of panels = 36 panels
% Keys used    = 1 , 2 to chose between the two classes
% Position of Chunks = It is varied from the fixed positions by 1
%                      step up, leftt, right, down (whichever is possible)
% Trials per block = 50-80 range i.e. in total per subject the range varies 
%                    from 150-240 trials
% Block 1 time = No time constraint  
% Block 2 time = 2 sec pause
% Block 3 time = 1 sec pause

function varargout = fixedOneStep(varargin)
% FIXEDONESTEP MATLAB code for fixedOneStep.fig
%      FIXEDONESTEP, by itself, creates a new FIXEDONESTEP or raises the existing
%      singleton*.
%
%      H = FIXEDONESTEP returns the handle to a new FIXEDONESTEP or the handle to
%      the existing singleton*.
%
%      FIXEDONESTEP('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in FIXEDONESTEP.M with the given input arguments.
%
%      FIXEDONESTEP('Property','Value',...) creates a new FIXEDONESTEP or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before fixedOneStep_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to fixedOneStep_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help fixedOneStep

% Last Modified by GUIDE v2.5 31-Jan-2020 13:43:22

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @fixedOneStep_OpeningFcn, ...
                   'gui_OutputFcn',  @fixedOneStep_OutputFcn, ...
                   'gui_LayoutFcn',  @fixedOneStep_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before fixedOneStep is made visible.
function fixedOneStep_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to fixedOneStep (see VARARGIN)

% Choose default command line output for fixedOneStep
handles.output = hObject;

global myCell;
global imageIncreement;
global panelNames;
global Imagescell;
global data;
global class1;
global class2;
global fileName;
global filename;

set(handles.start,'FontSize',20)
set(handles.Trial, 'FontSize',25)
set(handles.exit,'FontSize',20)
% Class 1 and Class 2 probabilities 

  class1 = [0.9,0.2,0.25,0.5,0.5];
  class2 = [0.4,0.8,0.85,0.5,0.5];
    
  data.class1prob = class1;
  data.class2prob = class2;
  
% Cell with the images number in a chunk and its fixed positions
% {Image1, Image2, Image3, Image4, [Valid positions of panels for Image1 for selecting randomly later]}

myCell = {1,2,3,4,[2,3,9]; 4,5,6,7, [2,7,14]; 8,9,10,11, [13,19,20,25]; 12,6,7,8, [15,18,19,20]; 3,2,9,11, [9,10]};

% The number of panels to leave from panel for image1 to image2, from
% image1 to image3 and image1 to image4

imageIncreement = [1,2,3; 7,14,21; 1,6,7; 6,7,13; 7,13,20];

% Panel and Images used cell

panelNames  = {'uipanel1';'uipanel2'; 'uipanel3'; 'uipanel4'; 'uipanel5'; 'uipanel6'; 'uipanel7'; 'uipanel8';'uipanel9';'uipanel10';'uipanel11';'uipanel12';'uipanel13';'uipanel14';'uipanel15';'uipanel16';'uipanel17';'uipanel18';'uipanel19';'uipanel20';'uipanel21';'uipanel22';'uipanel23';'uipanel24';'uipanel25';'uipanel26';'uipanel27';'uipanel28';'uipanel29';'uipanel30';'uipanel31';'uipanel32';'uipanel33';'uipanel34';'uipanel35';'uipanel36'};
Imagescell  = {imread('Image1.png'),imread('Image2.png'),imread('Image3.png'),imread('Image4.png'),imread('Image5.png'),imread('Image6.png'),imread('Image7.png'),imread('Image8.png'),imread('Image9.png'),imread('Image10.png'),imread('Image11.png'),imread('Image12.png')};

prompt = {'Enter the name of the output file'};
filename = inputdlg(prompt);
fileName = filename{1,1};



% Update handles structure
guidata(hObject, handles);
% UIWAIT makes fixedOneStep wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = fixedOneStep_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in start.
function start_Callback(hObject, eventdata, handles)
% hObject    handle to start (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output = hObject;
Block1_Callback(handles.Block1, eventdata, handles);
resumedialog;

Block2_Callback(handles.Block2, eventdata, handles);
pause(2);
resumedialog;

Block3_Callback(handles.Block3, eventdata, handles);
clear data;



% --- Executes on button press in exit.
function exit_Callback(hObject, eventdata, handles)
% hObject    handle to exit (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



function Trial_Callback(hObject, eventdata, handles)
% hObject    handle to Trial (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global trial;

set(hObject,'string',num2str(trial));

% Hints: get(hObject,'String') returns contents of Trial as text
%        str2double(get(hObject,'String')) returns contents of Trial as a double


% --- Executes during object creation, after setting all properties.
function Trial_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Trial (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on key press with focus on figure1 or any of its controls.
function figure1_WindowKeyPressFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.FIGURE)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)
% ------------------------------------------------------------

% SelectedClass = The key pressed

global selectedClass;
global reactionTime;
switch eventdata.Key
    case '1'
       selectedClass = 1;
       reactionTime = toc;
    case '2'
       selectedClass = 2;
       reactionTime = toc;
end

% --------------------------------------------------------------------
function Block_Callback(hObject, eventdata, handles)
% hObject    handle to Block (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --------------------------------------------------------------------
function Block1_Callback(hObject, eventdata, handles)
% hObject    handle to Block1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output = hObject;


global Panels;
global takenPositions;
global panelNames ;
global class1;
global class2;
global Imagescell;
global selectedClass;
global reactionTime;
global trial;
global data;
global myCell;
global imageIncreement;
global fileName;

% randomTrialno = range for everyBlock is 50-80 trials 

trialend = 30; %randomTrialno;
trialstart = 1;

% PanelImages     = 36 panels; 0 = no image; any other number = image no
% PanelNumber     = 36 panels; 0 = no image; any other number = panel no
% CorrectResponse = if selectedClass = the correct class
% Randonprob      = Prob from normal distribution for each trial on the
%                   basis of which the chunks were shown 
% chunks          = There are 5 chunks, Chunk no.
% selectedClass   = The key pressed (1 or 2) 

data.Block1.PanelImages = zeros(trialend,36);
data.Block1.PanelNumber = zeros(trialend,36);
data.Block1.ReactionTime = zeros(trialend,1);
data.Block1.CorrectResponse = zeros(trialend,1);
data.Block1.Randomdprob = zeros(trialend,1);
data.Block1.chunks = zeros(trialend,5);
data.Block1.selectedClass = zeros(trialend,1);
data.Block1.labels = zeros(trialend,1);
data.Block1.chunkPresented = zeros(trialend,5);

 
    
for trial = trialstart:trialend
    
    pause(1);                                                       % one sec pause before every trial start
    Trial_Callback(handles.Trial);
    selectedClass = 0;                                              % selected class reinitialize as 0 for every trial
    takenPositions = zeros(1,1);                                    % keeping a track of what positions in panels are filled 
    Panels = 1;                                                     % No of panels filled
   
    % Select class 1 or 2 
    selection = randperm(2,1)                                      % Random selection of the class to be presented 
    data.Block1.labels(trial,1) = selection;                 

      
    if(selection == 1) 
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class1)  % selectedChunks function return the vector of chunks 
        data.Block1.Randomdprob(trial,1) = random_prob;
        copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block1.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
         
        copy = 1;
         while (copy ~= length(selectedChunksArray)+1)                    
            data.Block1.chunks(trial,copy) = selectedChunksArray(1,copy);  % copying the same in the chunks array 
            copy = copy+1;
         end
    else
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class2)
        data.Block1.Randomdprob(trial,1) = random_prob;
        copy = 1;
            while (copy ~= length(selectedChunksArray)+1)
                data.Block1.chunks(trial,copy) = selectedChunksArray(1,copy);
                copy = copy+1;
            end
            copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block1.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
    end
    
% CHECK FOR ALL function checks all the chunks panels which are valid 
% and include all of them   
% Input  :  selectedChunks to be displayed according to the selected class
%           and random probability ; imageIncreement for the images ; the 
%           cell with image number and valid positions
% OUTPUT :  Array of Panel no for all the chunks 

    PanelNo = checkforall(selectedChunksArray,imageIncreement,myCell);
    

counter = 1;
while (counter ~= length(selectedChunksArray)+1)                          % Iterating over the selectedChunksArray to display
     chunkNo = selectedChunksArray(counter);                              % for iterating over the of images of a chunk
     axis1 = axes(handles.(panelNames{PanelNo(counter,1), 1}));           % AXIS1 = panel handle        
     image(axis1,(Imagescell{1,myCell{chunkNo,1}}));                      % IMAGE 1
     data.Block1.PanelImages(trial,Panels)= myCell{chunkNo,1};
     takenPositions(Panels,1) = PanelNo(counter,1);
     data.Block1.PanelNumber(trial,Panels)=PanelNo(counter,1);
     axis off;
     Panels = Panels + 1;
     
    
     axis2 = axes(handles.(panelNames{PanelNo(counter,2), 1}));           % IMAGE 2    
     image(axis2,(Imagescell{1,myCell{chunkNo,2}})); 
     data.Block1.PanelImages(trial,Panels)= myCell{chunkNo,2};
     axis off;
     takenPositions(Panels,1) = PanelNo(counter,2);
     data.Block1.PanelNumber(trial,Panels)=PanelNo(counter,2);
     Panels = Panels + 1;
     
     axis3 = axes(handles.(panelNames{PanelNo(counter,3) , 1}));          % IMAGE 3
     image(axis3,(Imagescell{1,myCell{chunkNo,3}}));
     axis off;
     data.Block1.PanelImages(trial,Panels)= myCell{chunkNo,3};
     takenPositions(Panels,1) = PanelNo(counter,3);
     data.Block1.PanelNumber(trial,Panels)=PanelNo(counter,3);
     Panels = Panels + 1;
     
     
     axis4 = axes(handles.(panelNames{PanelNo(counter,4), 1}));           % IMAGE 4
     image(axis4,(Imagescell{1,myCell{chunkNo,4}}));
     axis off;
     data.Block1.PanelImages(trial,Panels)= myCell{chunkNo,4};
     takenPositions(Panels,1) = PanelNo(counter,4);
     data.Block1.PanelNumber(trial,Panels)=PanelNo(counter,4);
     Panels = Panels + 1;
     
     counter = counter + 1;
     
end

% After displaying the Chunks 
% Display Leftover noise
randomPanels = randperm(36,36);                                           % to display noise, random no
randomImages = randi([1 12],1,36);                                        % random images for noise
 i = 1;
 j = 1;
 
 totalPanels = randomNoise(Panels)+Panels+1;                              % total panels to be used in every trial 
 
while (Panels ~= totalPanels)                                             % loop to display noise      
    if (randomPanels(1,i)~=  takenPositions(:,1))                  
     
        number = randomPanels(1,i);    
        axis1 = axes(handles.(panelNames{number,1}));
        image(axis1,Imagescell{1,randomImages(j)});
        axis off;
        data.Block1.PanelImages(trial,Panels)= randomImages(j);
        takenPositions(Panels) = randomPanels(1,i);
        data.Block1.PanelNumber(trial,Panels)=randomPanels(1,i);
        Panels = Panels + 1;
        j = j + 1;
        i = i + 1;
    else 
        i = i + 1;
    end
end     
     tic;                                                                 % timer start for reaction time which stops when
     w = waitforbuttonpress;                                              % a key is pressed 1 or 2 
     
     if (selectedClass == 0)
         data.Block1.ReactionTime(trial,1) = 0;                           
     else
         data.Block1.ReactionTime(trial,1) = reactionTime;
     end
     data.Block1.selectedClass(trial,1) = selectedClass;
     data.Block1.CorrectResponse(trial,1) = checkAnswer(selection, selectedClass);
     feedback(selection, selectedClass);                                  % Display of the feedback box
     
     trial = trial + 1;
     arrayfun(@cla,findall(0,'type','axes'))                              % clear all axis with any images 
    
end
 save (fileName, 'data','-v7.3');


% --------------------------------------------------------------------
function Block2_Callback(hObject, eventdata, handles)
% hObject    handle to Block2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output = hObject;

global Panels;
global takenPositions;
global panelNames ;
global class1;
global class2;
global Imagescell;
global selectedClass;
global reactionTime;
global trial;
global data;
global myCell;
global imageIncreement;
global fileName;
trialend = 30;%randomTrialno;
trialstart = 1;

data.Block2.PanelImages = zeros(trialend,36);
data.Block2.PanelNumber = zeros(trialend,36);
data.Block2.ReactionTime = zeros(trialend,1);
data.Block2.CorrectResponse = zeros(trialend,1);
data.Block2.Randomdprob = zeros(trialend,1);
data.Block2.chunks = zeros(trialend,5);
data.Block2.selectedClass = zeros(trialend,1);
data.Block2.labels = zeros(trialend,1);
data.Block2.chunkPresented = zeros(trialend,5);
    
for trial = trialstart:trialend
    pause(1);
    Trial_Callback(handles.Trial);
    selectedClass = 0;
    takenPositions = zeros(1,1);
    Panels = 1;
   
    % Select class 1 or 2 
    selection = randperm(2,1);
    data.Block2.labels(trial,1) = selection;

    % random number from Normal Distribution 
    % function selectedchunks for images no
     if(selection == 1) 
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class1);  % selectedChunks function return the vector of chunks 
        data.Block2.Randomdprob(trial,1) = random_prob;
        copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block2.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
         
        copy = 1;
         while (copy ~= length(selectedChunksArray)+1)                    
            data.Block2.chunks(trial,copy) = selectedChunksArray(1,copy);  % copying the same in the chunks array 
            copy = copy+1;
         end
    else
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class2);
        data.Block2.Randomdprob(trial,1) = random_prob;
        copy = 1;
            while (copy ~= length(selectedChunksArray)+1)
                data.Block2.chunks(trial,copy) = selectedChunksArray(1,copy);
                copy = copy+1;
            end
            copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block2.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
    end
    

% CHECK FOR ALL function checks all the chunks panels which are valid 
% and include all of them   
% INPUT  :  selectedChunks to be displayed according to the selected class
%           and random probability ; imageIncreement for the images ; the 
%           cell with image number and valid positions
% OUTPUT :  Array of Panel no for all the chunks 

    PanelNo = checkforall(selectedChunksArray,imageIncreement,myCell);
    

counter = 1;
while (counter ~= length(selectedChunksArray)+1)                          % Iterating over the selectedChunksArray to display
     chunkNo = selectedChunksArray(counter);                              % for iterating over the of images of a chunk
     axis1 = axes(handles.(panelNames{PanelNo(counter,1), 1}));           % AXIS1 = panel handle        
     image(axis1,(Imagescell{1,myCell{chunkNo,1}}));                      % IMAGE 1
     data.Block2.PanelImages(trial,Panels)= myCell{chunkNo,1};
     takenPositions(Panels,1) = PanelNo(counter,1);
     data.Block2.PanelNumber(trial,Panels)=PanelNo(counter,1);
     axis off;
     Panels = Panels + 1;
     
    
     axis2 = axes(handles.(panelNames{PanelNo(counter,2), 1}));           % IMAGE 2    
     image(axis2,(Imagescell{1,myCell{chunkNo,2}})); 
     data.Block2.PanelImages(trial,Panels)= myCell{chunkNo,2};
     axis off;
     takenPositions(Panels,1) = PanelNo(counter,2);
     data.Block2.PanelNumber(trial,Panels)=PanelNo(counter,2);
     Panels = Panels + 1;
     
     axis3 = axes(handles.(panelNames{PanelNo(counter,3) , 1}));          % IMAGE 3
     image(axis3,(Imagescell{1,myCell{chunkNo,3}}));
     axis off;
     data.Block2.PanelImages(trial,Panels)= myCell{chunkNo,3};
     takenPositions(Panels,1) = PanelNo(counter,3);
     data.Block2.PanelNumber(trial,Panels)=PanelNo(counter,3);
     Panels = Panels + 1;
     
     
     axis4 = axes(handles.(panelNames{PanelNo(counter,4), 1}));           % IMAGE 4
     image(axis4,(Imagescell{1,myCell{chunkNo,4}}));
     axis off;
     data.Block2.PanelImages(trial,Panels)= myCell{chunkNo,4};
     takenPositions(Panels,1) = PanelNo(counter,4);
     data.Block2.PanelNumber(trial,Panels)=PanelNo(counter,4);
     Panels = Panels + 1;
     
     counter = counter + 1;
     
end

% After displaying the Chunks 
% Display Leftover noise (the number of noise images will also be selected randomly)

randomPanels = randperm(36,36);
randomImages = randi([1 12],1,36);
 i = 1;
 j = 1;
 
 totalPanels = randomNoise(Panels)+Panels+1;
 
while (Panels ~= totalPanels)
    if (randomPanels(1,i)~=  takenPositions(:,1))
     number = randomPanels(1,i);
     axis1 = axes(handles.(panelNames{number,1}));
     image(axis1,Imagescell{1,randomImages(j)});
     axis off;
     data.Block2.PanelImages(trial,Panels)= randomImages(j);
     takenPositions(Panels) = randomPanels(1,i);
     data.Block2.PanelNumber(trial,Panels)=randomPanels(1,i);
     Panels = Panels + 1;
     j = j + 1;
     i = i + 1;
    else 
        i = i + 1;
    end
end     
     tic;
     pause(2);
     if (selectedClass == 0)
         data.Block2.ReactionTime(trial,1) = 0;
     else
         data.Block2.ReactionTime(trial,1) = reactionTime;
     end
     data.Block2.selectedClass(trial,1) = selectedClass; 
     data.Block2.CorrectResponse(trial,1) = checkAnswer(selection, selectedClass);
     feedback(selection, selectedClass);
     
     trial = trial + 1;
     arrayfun(@cla,findall(0,'type','axes'))
    
end
 save (fileName, 'data','-v7.3');


% --------------------------------------------------------------------
function Block3_Callback(hObject, eventdata, handles)
% hObject    handle to Block3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
handles.output = hObject;

% INVENTORY 

global Panels;
global takenPositions;
global panelNames ;
global class1;
global class2;
global Imagescell;
global selectedClass;
global reactionTime;
global trial;
global data;
global myCell;
global imageIncreement;
global fileName;

trialend = randomTrialno;
trialstart = 1;

data.Block3.PanelImages = zeros(trialend,36);
data.Block3.PanelNumber = zeros(trialend,36);
data.Block3.ReactionTime = zeros(trialend,1);
data.Block3.CorrectResponse = zeros(trialend,1);
data.Block3.Randomdprob = zeros(trialend,1);
data.Block3.chunks = zeros(trialend,5);
data.Block3.selectedClass = zeros(trialend,1);
data.Block3.labels = zeros(trialend,1);
data.Block3.chunkPresented = zeros(trialend,5);
    
for trial = trialstart:trialend
    pause(1);
    Trial_Callback(handles.Trial);
    selectedClass = 0;
    takenPositions = zeros(1,1);
    Panels = 1;
   
    % Select class 1 or 2 
    selection = randperm(2,1);
   data.Block3.labels(trial,1) = selection;

    % random number from Normal Distribution 
    %function selectedchunks for images no
    if(selection == 1) 
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class1);  % selectedChunks function return the vector of chunks 
        data.Block3.Randomdprob(trial,1) = random_prob;
        copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block3.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
         
        copy = 1;
         while (copy ~= length(selectedChunksArray)+1)                    
            data.Block3.chunks(trial,copy) = selectedChunksArray(1,copy);  % copying the same in the chunks array 
            copy = copy+1;
         end
    else
        [selectedChunksArray,random_prob,chunkPresented] = selectedChunks(class2);
        data.Block3.Randomdprob(trial,1) = random_prob;
        copy = 1;
            while (copy ~= length(selectedChunksArray)+1)
                data.Block3.chunks(trial,copy) = selectedChunksArray(1,copy);
                copy = copy+1;
            end
            copy = 1;
         while (copy ~= length(chunkPresented)+1)                    
           data.Block3.chunkPresented(trial,copy) = chunkPresented(1,copy);   % copying the same in the chunks array 
            copy = copy+1;
         end
    end
    

% CHECK FOR ALL function checks all the chunks panels which are valid 
% and include all of them   
% Input  :  selectedChunks to be displayed according to the selected class
%           and random probability ; imageIncreement for the images ; the 
%           cell with image number and valid positions
% OUTPUT :  Array of Panel no for all the chunks 

    PanelNo = checkforall(selectedChunksArray,imageIncreement,myCell);
    

counter = 1;
while (counter ~= length(selectedChunksArray)+1)                          % Iterating over the selectedChunksArray to display
     chunkNo = selectedChunksArray(counter);                              % for iterating over the of images of a chunk
     axis1 = axes(handles.(panelNames{PanelNo(counter,1), 1}));           % AXIS1 = panel handle        
     image(axis1,(Imagescell{1,myCell{chunkNo,1}}));                      % IMAGE 1
     data.Block3.PanelImages(trial,Panels)= myCell{chunkNo,1};
     takenPositions(Panels,1) = PanelNo(counter,1);
     data.Block3.PanelNumber(trial,Panels)=PanelNo(counter,1);
     axis off;
     Panels = Panels + 1;
     
    
     axis2 = axes(handles.(panelNames{PanelNo(counter,2), 1}));           % IMAGE 2    
     image(axis2,(Imagescell{1,myCell{chunkNo,2}})); 
     data.Block3.PanelImages(trial,Panels)= myCell{chunkNo,2};
     axis off;
     takenPositions(Panels,1) = PanelNo(counter,2);
     data.Block3.PanelNumber(trial,Panels)=PanelNo(counter,2);
     Panels = Panels + 1;
     
     axis3 = axes(handles.(panelNames{PanelNo(counter,3) , 1}));          % IMAGE 3
     image(axis3,(Imagescell{1,myCell{chunkNo,3}}));
     axis off;
     data.Block3.PanelImages(trial,Panels)= myCell{chunkNo,3};
     takenPositions(Panels,1) = PanelNo(counter,3);
     data.Block3.PanelNumber(trial,Panels)=PanelNo(counter,3);
     Panels = Panels + 1;
     
     
     axis4 = axes(handles.(panelNames{PanelNo(counter,4), 1}));           % IMAGE 4
     image(axis4,(Imagescell{1,myCell{chunkNo,4}}));
     axis off;
     data.Block3.PanelImages(trial,Panels)= myCell{chunkNo,4};
     takenPositions(Panels,1) = PanelNo(counter,4);
     data.Block3.PanelNumber(trial,Panels)=PanelNo(counter,4);
     Panels = Panels + 1;
     
     counter = counter + 1;
     
end

% After displaying the Chunks 
% Display Leftover noise
randomPanels = randperm(36,36);
randomImages = randi([1 12],1,36);
 i = 1;
 j = 1;
 
 totalPanels = randomNoise(Panels)+Panels+1;
 
while (Panels ~= totalPanels)
    if (randomPanels(1,i)~=  takenPositions(:,1))
     number = randomPanels(1,i);
     axis1 = axes(handles.(panelNames{number,1}));
     image(axis1,Imagescell{1,randomImages(j)});
     axis off;
     data.Block3.PanelImages(trial,Panels)= randomImages(j);
     takenPositions(Panels) = randomPanels(1,i);
     data.Block3.PanelNumber(trial,Panels)=randomPanels(1,i);
     Panels = Panels + 1;
     j = j + 1;
     i = i + 1;
    else 
        i = i + 1;
    end
end     
     tic;
     pause(1);
     if (selectedClass == 0)
         data.Block3.ReactionTime(trial,1) = 0
     else
         data.Block3.ReactionTime(trial,1) = reactionTime
     end
     data.Block3.CorrectResponse(trial,1) = checkAnswer(selection, selectedClass);
     data.Block3.selectedClass(trial,1)= selectedClass;
     feedback(selection, selectedClass);
     
     trial = trial + 1;
     arrayfun(@cla,findall(0,'type','axes'))
    
end
save (fileName, 'data','-v7.3');



% --- Creates and returns a handle to the GUI figure. 
function h1 = fixedOneStep_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end
load fixedOneStep.mat


appdata = [];
appdata.GUIDEOptions = mat{1};
appdata.lastValidTag = 'figure1';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'figure1');

h1 = figure(...
'PaperUnits','inches',...
'Units','characters',...
'Position',[181.066666666667 58.0461538461538 217.166666666667 54.4666666666667],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',get(0,'defaultfigureColor'),...
'IntegerHandle','off',...
'WindowKeyPressFcn',@(hObject,eventdata)fixedOneStep('figure1_WindowKeyPressFcn',hObject,eventdata,guidata(hObject)),...
'MenuBar','none',...
'Name','test1',...
'NumberTitle','off',...
'HandleVisibility','callback',...
'Tag','figure1',...
'Resize','off',...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'PaperSize',[8.5 11],...
'PaperSizeMode',get(0,'defaultfigurePaperSizeMode'),...
'PaperType','usletter',...
'PaperTypeMode',get(0,'defaultfigurePaperTypeMode'),...
'PaperUnitsMode',get(0,'defaultfigurePaperUnitsMode'),...
'ScreenPixelsPerInchMode','manual',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanel1';

h2 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel1',...
'Position',[41.3333333333333 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel2';

h3 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel2',...
'Position',[41.3333333333333 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel3';

h4 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel3',...
'Position',[41.3333333333333 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel4';

h5 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel4',...
'Position',[41.3333333333333 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel5';

h6 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel5',...
'Position',[41.3333333333333 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel7';

h7 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel7',...
'Position',[58 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel8';

h8 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel8',...
'Position',[58 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel10';

h9 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel10',...
'Position',[58 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel11';

h10 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel11',...
'Position',[58 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel13';

h11 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel13',...
'Position',[74.6666666666667 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel14';

h12 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel14',...
'Position',[74.6666666666667 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel15';

h13 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel15',...
'Position',[74.6666666666667 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel16';

h14 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel16',...
'Position',[74.6666666666667 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel17';

h15 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel17',...
'Position',[74.6666666666667 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel19';

h16 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel19',...
'Position',[91.3333333333333 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel20';

h17 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel20',...
'Position',[91.3333333333333 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel21';

h18 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel21',...
'Position',[91.3333333333333 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel22';

h19 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel22',...
'Position',[91.3333333333333 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel23';

h20 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel23',...
'Position',[91.3333333333333 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel25';

h21 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel25',...
'Position',[108 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel26';

h22 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel26',...
'Position',[108 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel27';

h23 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel27',...
'Position',[108 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel29';

h24 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel29',...
'Position',[108 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel28';

h25 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel28',...
'Position',[108 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel9';

h26 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel9',...
'Position',[58 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'start';

h27 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Start',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[155 18 13 5],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)fixedOneStep('start_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','start',...
'KeyPressFcn',blanks(0));

appdata = [];
appdata.lastValidTag = 'exit';

h28 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String','Exit',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[155 15 13 2],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)fixedOneStep('exit_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','exit',...
'KeyPressFcn',blanks(0));

appdata = [];
appdata.lastValidTag = 'Trial';

h29 = uicontrol(...
'Parent',h1,...
'Units','characters',...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'String',blanks(0),...
'Style','edit',...
'Position',[155 11.5333333333333 13 3],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)fixedOneStep('Trial_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)fixedOneStep('Trial_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','Trial',...
'KeyPressFcn',blanks(0));

appdata = [];
appdata.lastValidTag = 'uipanel31';

h30 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel31',...
'Position',[124.666666666667 44.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel32';

h31 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel32',...
'Position',[124.666666666667 37.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel33';

h32 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel33',...
'Position',[124.666666666667 31.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel35';

h33 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel35',...
'Position',[124.666666666667 17.7333333333333 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel34';

h34 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel34',...
'Position',[124.666666666667 24.4 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel6';

h35 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel6',...
'Position',[41.3333333333333 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel12';

h36 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel12',...
'Position',[58 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel18';

h37 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel18',...
'Position',[74.6666666666667 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel24';

h38 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel24',...
'Position',[91.3333333333333 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel30';

h39 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel30',...
'Position',[108 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'uipanel36';

h40 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units','characters',...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',2,...
'Title',blanks(0),...
'BackgroundColor',[1 1 1],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel36',...
'Position',[124.666666666667 11.0666666666667 16.8333333333333 6.73333333333333]);

appdata = [];
appdata.lastValidTag = 'Block';

h41 = uimenu(...
'Parent',h1,...
'Callback',@(hObject,eventdata)fixedOneStep('Block_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Block',...
'Tag','Block',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Block1';

h42 = uimenu(...
'Parent',h41,...
'Callback',@(hObject,eventdata)fixedOneStep('Block1_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Block1',...
'Tag','Block1',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Block2';

h43 = uimenu(...
'Parent',h41,...
'Callback',@(hObject,eventdata)fixedOneStep('Block2_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Block2',...
'Tag','Block2',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'Block3';

h44 = uimenu(...
'Parent',h41,...
'Callback',@(hObject,eventdata)fixedOneStep('Block3_Callback',hObject,eventdata,guidata(hObject)),...
'Label','Block3',...
'Tag','Block3',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );


hsingleton = h1;


% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % FIXEDONESTEP
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % FIXEDONESTEP(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % FIXEDONESTEP('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % FIXEDONESTEP(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI MATLAB code file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


